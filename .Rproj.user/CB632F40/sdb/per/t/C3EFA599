{
    "contents" : "#' Sample Size Calculations for Two-Sample Microarray Experiments with \n#' Differing Mean Expressions but fixed Standard Deviations Among Genes\n#' \n#' For given desired power, controlled false discovery rate, \n#' and user-specified proportions of non-differentially expressed genes, \n#' \\code{ssize.twoSampVaryDelta} calculates appropriate sample sizes for \n#' two-sample microarray experiments in which the differences between mean \n#' treatment expression levels (\\emph{delta.g} for gene \\emph{g}) \n#' vary among genes. \n#' A plot of power versus sample size is generated.\n#' \n#' @param deltaMean location (mean) parameter of normal distribution \n#'                  followed by each \\emph{delta.g}.\n#' @param deltaSE scale (standard deviation) parameter of normal distribution \n#'                followed by each \\emph{delta.g}.\n#' @param sigma the common standard deviation of expressions for all genes.\n#' @param fdr the false discovery rate to be controlled.\n#' @param power the desired power to be achieved.\n#' @param pi0 a vector (or scalar) of proportions of non-differentially \n#'            expressed genes.\n#' @param maxN the maximum sample size used for power calculations.\n#' @param side options are \"two-sided\", \"upper\", or \"lower\".\n#' @param cex.title controls size of chart titles.\n#' @param cex.legend controls size of chart legend.\n#' \n#' @details Each \\emph{delta.g} is assumed to follow a Normal distribution \n#' with mean \\code{deltaMean} and standard deviation \\code{deltaSE}. \n#' The standard deviations of expressions are assumed identical for all genes.\n#'\n#' If a vector is input for \\code{pi0}, sample size calculations \n#' are performed for each proportion.\n#' \n#' @return \\item{ssize}{sample sizes (for each treatment) at \n#'                      which desired power is first reached.}\n#' @return \\item{power}{power calculations with corresponding \n#'                      sample sizes.}\n#' @return \\item{crit.vals}{critical value calculations with \n#'                          corresponding sample sizes.}\n#' \n#' @author Ran Bi \\email{biran@@iastate.edu}, \n#'         Peng Liu \\email{pliu@@iastate.edu}\n#' \n#' @references Liu, P. and Hwang, J. T. G. (2007) Quick calculation for \n#' sample size while controlling false discovery rate with application \n#' to microarray analysis. \\emph{Bioinformatics} 23(6): 739-746. \n#' \n#' Orr, M. and Liu, P. (2009) Sample size estimation while controlling \n#' false discovery rate for microarray experiments using ssize.fdr package. \n#' \\emph{The R Journal}, 1, 1, May 2009, 47-53. \n#' \n#' @seealso \\code{\\link{ssize.twoSamp}}, \\code{\\link{ssize.twoSampVary}}, \n#'          \\code{\\link{ssize.oneSamp}}, \\code{\\link{ssize.oneSampVary}}, \n#'          \\code{\\link{ssize.F}}, \\code{\\link{ssize.Fvary}}\n#' \n#' @examples\n#' dm <- 1.2; ds <- 0.1  ## the delta.g's follow a Normal(1.2, 0.1) distribution\n#' s <- 1                ## common standard deviation\n#' fdr <- 0.05           ## false discovery rate to be controlled\n#' pwr <- 0.8            ## desired power\n#' pi0 <- c(0.5, 0.8, 0.99) ## proportions of non-differentially expressed genes\n#' N <- 35               ## maximum sample size for calculations\n#' \n#' size <- ssize.twoSampVaryDelta(deltaMean = dm, deltaSE = ds, sigma = s, \n#'                                fdr = fdr, power = pwr, pi0 = pi0, \n#'                                maxN = N, side = \"two-sided\")\n#' size$ssize                ## first sample size(s) to reach desired power\n#' size$power                ## calculated power for each sample size\n#' size$crit.vals            ## calculated critical value for each sample size\n#' \n#' @export\n#' \nssize.twoSampVaryDelta <- function (deltaMean, deltaSE, sigma, fdr = 0.05, \n                                    power = 0.8, pi0 = 0.95, maxN = 35, \n                                    side = \"two-sided\", cex.title = 1.15, \n                                    cex.legend = 1){\n  \n  N <- maxN\n  a <- fdr\n  p <- pi0\n  if (side == \"two-sided\") {\n    TSVaryDelta <- function(c) {\n      r <- a * (1 - p)/((1 - a) * p)\n      dif <- abs((2 * pt(q = -c, df = 2 * n - 2)/\n                    (1 - pt(q = c/sqrt(deltaSE^2 / (sigma^2 * 2/n) +1), \n                            df = 2 * n - 2, \n                            ncp = deltaMean/sqrt(deltaSE^2 + sigma^2 * 2/n))\n                     + pt(q = -c/sqrt(deltaSE^2 / (sigma^2 * 2/n) +1), \n                          df = 2 * n - 2, \n                          ncp = deltaMean/sqrt(deltaSE^2 + sigma^2 * 2/n))) \n                  - r))\n      return(dif)\n    }\n  }\n  if (side == \"upper\") {\n    TSVaryDelta <- function(c) {\n      r <- a * (1 - p)/((1 - a) * p)\n      dif <- abs((2 * pt(q = -c, df = 2 * n - 2)/\n                    (1 - pt(q = c/sqrt(deltaSE^2 / (sigma^2 * 2/n) +1), \n                            df = 2 * n - 2, \n                            ncp = deltaMean/sqrt(deltaSE^2 + sigma^2 * 2/n)))\n                  - r))\n      return(dif)\n    }\n  }\n  if (side == \"lower\") {\n    TSVaryDelta <- function(c) {\n      r <- a * (1 - p)/((1 - a) * p)\n      dif <- abs((2 * pt(q = -c, df = 2 * n - 2)/\n                    pt(q = -c/sqrt(deltaSE^2 / (sigma^2 * 2/n) +1), \n                       df = 2 * n - 2, \n                       ncp = deltaMean/sqrt(deltaSE^2 + sigma^2 * 2/n)) - r))\n      return(dif)\n    }\n  }\n  \n  pwr2 <- NULL\n  crit <- NULL\n  ssize <- matrix(0, nrow = length(pi0), ncol = 3)\n  colnames(ssize) <- c(\"pi0\", \"ssize\", \"power\")\n  up.start <- 50\n  for (i in 1:length(pi0)) {\n    p <- pi0[i]\n    up <- up.start\n    for (n in 3:N) {\n      ci <- optimize(f = TSVaryDelta, interval = c(0, up))$min\n      up <- ci\n      if (abs(ci - up.start) >= 1) {\n        if (side == \"two-sided\") {\n          pwr.new <- (1 - pt(q = ci/sqrt(deltaSE^2 / (sigma^2 * 2/n) +1), \n                             df = 2 * n - 2, \n                             ncp = deltaMean/sqrt(deltaSE^2 + sigma^2 * 2/n))\n                      + pt(q = -ci/sqrt(deltaSE^2 / (sigma^2 * 2/n) +1), \n                           df = 2 * n - 2, \n                           ncp = deltaMean/sqrt(deltaSE^2 + sigma^2 * 2/n)))\n        }\n      }\n      if (abs(ci - up.start) < 1) {\n        pwr.new <- 0\n        ci <- NA\n      }\n      crit <- c(crit, ci)\n      pwr2 <- c(pwr2, pwr.new)\n      if (pwr2[(i - 1) * (N - 2) + n - 2] >= power & ssize[i, 1] == 0) {\n        ssize[i, ] <- c(p, n, pwr2[(i - 1) * (N - 2) + n - 2])\n      }\n    }\n  }\n  ssize[, 1] <- pi0\n  if (sum(ssize == 0) > 0) {\n    warning(\"Desired power not achieved for at least one pi0\")\n  }\n  ssize[ssize == 0] <- NA\n  pwrMatrix <- matrix(c(3:N, pwr2), ncol = length(pi0) + 1, \n                      byrow = FALSE)\n  for (i in 1:length(pi0)) {\n    if (i == 1) {\n      plot(3:N, pwrMatrix[, i + 1], col = i, xlim = c(0, N), ylim = c(0, 1), \n           xlab = \"\", ylab = \"\", pch = 16)\n      lines(3:N, pwrMatrix[, i + 1], col = i, lty = i)\n    }\n    if (i != 1) {\n      points(3:N, pwrMatrix[, i + 1], col = i, pch = 16)\n      lines(3:N, pwrMatrix[, i + 1], col = i, lty = i)\n    }\n  }\n  abline(h = power, lty = 2, lwd = 2)\n  abline(v = 0:N, h = 0.1 * (0:10), col = \"gray\", lty = 3)\n  title(xlab = \"Sample size (n)\", ylab = \"Power\")\n  mtext(bquote(paste(\"Average power vs. sample size with fdr=\", .(fdr), \",\")), \n        cex = cex.title, padj = -1.85)\n  mtext(bquote(paste(Delta[g], \"~N(\", .(round(deltaMean, 4)), \",\", \n                     .(round(deltaSE, 4)), \") and \", sigma[g], \" = \", \n                     .(round(sigma, 4)))), cex = cex.title, padj = -0.1)\n  legend(x = N, y = 0, xjust = 1, yjust = 0, col = 1:i, pch = c(16, 16, 16), \n         lty = 1:length(pi0), legend = as.character(pi0), \n         bg = \"white\", title = expression(pi[0]), cex = cex.legend)\n  pwrMatrix <- round(pwrMatrix, 7)\n  colnames(pwrMatrix) <- c(\"n\", as.character(pi0))\n  critMatrix <- matrix(c(3:N, crit), ncol = length(pi0) + 1, byrow = FALSE)\n  colnames(critMatrix) <- c(\"n\", as.character(pi0))\n  ret <- NULL\n  ret$ssize <- ssize\n  ret$power <- pwrMatrix\n  ret$crit.vals <- critMatrix\n  return(ret)\n}",
    "created" : 1433967716647.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "759743603",
    "id" : "C3EFA599",
    "lastKnownWriteTime" : 1455048362,
    "path" : "~/Documents/ISU/Publication/ssize_rna/ver1.2.1/ssizeRNA/R/ssize.twoSampVaryDelta.R",
    "project_path" : "R/ssize.twoSampVaryDelta.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}