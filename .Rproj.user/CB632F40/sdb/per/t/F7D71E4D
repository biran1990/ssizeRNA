{
    "contents" : "#' Sample Size Calculations for Two-Sample RNA-seq Experiments \n#' with Single Set of Parameters\n#' \n#' This function calculates appropriate sample sizes for two-sample \n#' RNA-seq experiments for a desired power in which mean and \n#' dispersion parameters are identical for all genes. \n#' Sample size calculations are performed at controlled false discovery rates, \n#' user-specified proportions of non-differentially expressed genes, \n#' mean counts in control group, dispersion, and log fold change. \n#' A plot of power versus sample size is generated.\n#' \n#' @import edgeR limma\n#' @param nGenes total number of genes, the default value is \\code{10000}.\n#' @param pi0 proportion of non-differentially expressed genes, \n#'            the default value is \\code{0.8}.\n#' @param m pseudo sample size for generated data.\n#' @param mu a vector (or scalar) of mean counts in control group \n#'           from which to simulate.\n#' @param disp a vector (or scalar) of dispersion parameter \n#'             from which to simulate.\n#' @param logfc a vector (or scalar, or a function that takes an integer n \n#'                        and generates a vector of length n)\n#'              of log fold change for differentially expressed (DE) genes.  \n#' @param up proportion of up-regulated genes among all DE genes, \n#'           the default value is \\code{0.5}.\n#' @param replace sample with or without replacement from given parameters. \n#'                See Details for more information.\n#' @param fdr the false discovery rate to be controlled.\n#' @param power the desired power to be achieved.\n#' @param maxN the maximum sample size used for power calculations.\n#' @param side options are \"two-sided\", \"upper\", or \"lower\".\n#' @param cex.title controls size of chart titles.\n#' @param cex.legend controls size of chart legend.\n#' \n#' @details If a vector is input for \\code{pi0}, sample size calculations \n#'          are performed for each proportion.\n#' \n#' If the total number of genes is larger than length of \\code{mu} or \n#' \\code{disp}, \\code{replace} always equals \\code{TRUE}.\n#' \n#' @return \\item{ssize}{sample sizes (for each treatment) at which \n#'                      desired power is first reached.}\n#' @return \\item{power}{power calculations with corresponding sample sizes.}\n#' @return \\item{crit.vals}{critical value calculations with \n#'                          corresponding sample sizes.}\n#' \n#' @author Ran Bi \\email{biran@@iastate.edu}, \n#'         Peng Liu \\email{pliu@@iastate.edu}\n#' \n#' @references Liu, P. and Hwang, J. T. G. (2007) Quick calculation for \n#' sample size while controlling false discovery rate with application \n#' to microarray analysis. \\emph{Bioinformatics} 23(6): 739-746. \n#' \n#' Orr, M. and Liu, P. (2009) Sample size estimation while controlling \n#' false discovery rate for microarray experiments using ssize.fdr package. \n#' \\emph{The R Journal}, 1, 1, May 2009, 47-53. \n#' \n#' Law, C. W., Chen, Y., Shi, W., Smyth, G. K. (2014). Voom: precision weights \n#' unlock linear model analysis tools for RNA-seq read counts. \n#' \\emph{Genome Biology} 15, R29.\n#' \n#' @seealso \\code{\\link{ssizeRNA_vary}}\n#' \n#' @examples\n#' mu <- 10                ## mean counts in control group for all genes\n#' disp <- 0.1             ## dispersion for all genes\n#' logfc <- log(2)         ## log fold change for DE genes\n#' \n#' size <- ssizeRNA_single(m = 30, mu = mu, disp = disp, logfc = logfc, \n#'                         maxN = 20)\n#' size$ssize              ## first sample size to reach desired power\n#' size$power              ## calculated power for each sample size\n#' size$crit.vals          ## calculated critical value for each sample size\n#' \n#' @export\n#' \nssizeRNA_single <- function(nGenes = 10000, pi0 = 0.8, m = 200, mu, disp, \n                            logfc, up = 0.5, replace = TRUE, fdr = 0.05, \n                            power = 0.8, maxN = 35, side = \"two-sided\", \n                            cex.title = 1.15, cex.legend = 1){ \n  \n  sim <- sim.counts(nGenes, pi0, m, mu, disp, logfc, up, replace)\n\n  d_cpm <- DGEList(sim$counts)\n  d_cpm <- calcNormFactors(d_cpm)\n  group = rep(c(1, 2), each = m)  # treatment groups\n  design <- model.matrix(~ factor(group))\n  y <- voom(d_cpm, design, plot = FALSE)\n  # convert read counts to log2-cpm with associated weights\n  \n  fit <- lmFit(y, design)\n  fit <- eBayes(fit)\n  fit$logcpm <- y$E  # normalized log-cpm value\n  fit$weights <- y$weights  # precision weights for each observation \n  fit$www <- sqrt(2/m * apply(y$weights[, 1:m], 1, sum) * \n                    apply(y$weights[, (m+1):(2*m)], 1, sum) /\n                    apply(y$weights, 1, sum))\n  fit$Delta <- fit$coef[, 2] * fit$www  \n  # effect size defined as weighted mean difference of log-cpm values, Delta_g\n  \n  dm <- mean((fit$Delta * sim$de)[sim$de!=0])\n  ds <- sd((fit$Delta * sim$de)[sim$de!=0])\n  sig <- density(fit$sigma)$x[which.max(density(fit$sigma)$y)]\n  \n  ret <- ssize.twoSampVaryDelta(deltaMean = dm, deltaSE = ds, sigma = sig, \n                                fdr = fdr, power = power, pi0 = pi0, \n                                maxN = maxN, side = side, \n                                cex.title = cex.title, cex.legend = cex.legend)\n  return(ret)\n}\n",
    "created" : 1433967717584.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3001942124",
    "id" : "F7D71E4D",
    "lastKnownWriteTime" : 1455048196,
    "path" : "~/Documents/ISU/Publication/ssize_rna/ver1.2.1/ssizeRNA/R/ssizeRNA_single.R",
    "project_path" : "R/ssizeRNA_single.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}