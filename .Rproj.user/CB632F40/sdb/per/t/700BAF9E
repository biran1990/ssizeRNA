{
    "contents" : "#' RNA-seq Count Data Simulation from Negative-Binomial Distribution\n#' \n#' This function simulates count data from Negative-Binomial distribution\n#' for two-sample RNA-seq experiments with given mean, dispersion \n#' and log fold change. \n#' A count data matrix is generated.\n#' \n#' @import MASS\n#' @param nGenes total number of genes, the default value is \\code{10000}.\n#' @param pi0 proportion of non-differentially expressed genes, \n#'            the default value is \\code{0.8}.\n#' @param m sample size per treatment group.\n#' @param mu a vector (or scalar) of mean counts in control group \n#'           from which to simulate.\n#' @param disp a vector (or scalar) of dispersion parameter \n#'             from which to simulate.\n#' @param logfc a vector (or scalar, or a function that takes an integer n \n#'                        and generates a vector of length n)\n#'              of log fold change for differentially expressed (DE) genes.  \n#' @param up proportion of up-regulated genes among all DE genes, \n#'           the default value is \\code{0.5}.\n#' @param replace sample with or without replacement from given parameters. \n#'                See Details for more information.\n#' \n#' @details If the total number of genes \\code{nGenes} is larger \n#'          than length of \\code{mu} or \\code{disp}, \n#'          \\code{replace} always equals \\code{TRUE}.\n#' \n#' @return \\item{counts}{RNA-seq count data matrix.}\n#' @return \\item{group}{treatment group vector.}\n#' @return \\item{lambda0}{mean counts in control group for each gene.}\n#' @return \\item{phi0}{dispersion parameter for each gene.}\n#' @return \\item{de}{differentially expressed genes indicator: \n#'                   \\code{0} for non-differentially expressed genes, \n#'                   \\code{1} for up-regulated genes, \n#'                   \\code{-1} for down-regulated genes.}\n#' @return \\item{delta}{log fold change for each gene between \n#'                      treatment group and control group.}\n#' \n#' @author Ran Bi \\email{biran@@iastate.edu}, \n#'         Peng Liu \\email{pliu@@iastate.edu}\n#' \n#' @examples\n#' m <- 3                    ## sample size per treatment group\n#' mu <- 10                  ## mean counts in control group for all genes \n#' disp <- 0.1               ## dispersion for all genes\n#' logfc <- log(2)           ## log fold change for DE genes\n#' \n#' sim <- sim.counts(m = m, mu = mu, disp = disp, logfc = logfc)\n#' sim$counts                ## count data matrix\n#' \n#' \n#' ## varying fold change\n#' logfc1 <- function(x){rnorm(x, log(2), 0.5*log(2))}\n#' sim1 <- sim.counts(m = m, mu = mu, disp = disp, logfc = logfc1)\n#' \n#' @export\n#' \nsim.counts <- function(nGenes = 10000, pi0 = 0.8, m, mu, disp, logfc, \n                       up = 0.5, replace = TRUE){\n  arg <- list(nGenes = nGenes,\n              pi0 = pi0,\n              group = rep(c(1, 2), each = m))\n \n  ## expected false positives\n  FP <- round(nGenes * pi0)\n  TP <- nGenes - FP \n  \n  ## types of true positives\n  TP_up <- round(TP * up)\n  TP_down <- TP - TP_up \n\n  de <- c(rep(0, FP), rep(1, TP_up), rep(-1, TP_down))\n  de <- de[sample.int(length(de))] ## resample\n  \n  # h = vector indicating which pseudo-genes to re-simulate\n  h <- rep(TRUE, nGenes) \n  counts <- matrix(0, nrow = nGenes, ncol = 2 * m)\n  \n  ## log fold change, approximately half positive, half negative\n  delta <- rep(0, nGenes)\n  if (is.function(logfc)){\n    lfc <- logfc(TP)\n  }else{\n    lfc <- logfc\n  }\n  delta[de != 0] <- lfc * de[de != 0]\n  \n  selected_genes <- true_means <- true_disps <- rep(0, nGenes)\n  left_genes <- 1:length(mu)\n  lambda <- phi <- matrix(0, nrow = nGenes, ncol = 2 * m)\n  \n  while(any(h)){\n    temp <- sample.int(length(left_genes), sum(h), replace)\n    temp <- temp[order(temp)]\n    selected_genes[h] <- left_genes[temp]\n    if (replace == FALSE){\n      left_genes <- left_genes[-temp]\n    }\n    \n    true_means[h] <- mu[selected_genes[h]]\n    true_disps[h] <- disp[selected_genes[h]]\n    \n    lambda[h,] <- matrix(true_means[h], ncol = 1) %*% \n                  matrix(rep(1, 2 * m), nrow = 1) * \n                  cbind(matrix(rep(1, sum(h) * m), ncol = m), \n                        matrix(rep(exp(delta[h]), m), ncol = m))\n    ## mean of counts\n    \n    phi[h,] <- matrix(rep(true_disps[h], 2 * m), ncol = 2 * m)\n    ## dispersion of counts\n    \n    counts[h,] <- rnegbin(sum(h) * 2 * m, lambda[h,], 1 / phi[h,])\n    h <- (rowSums(cpm(counts) > 2) < 3)\n    # print(sum(h))\n  }\n  \n  if(any(rowSums(cpm(counts) > 2) < 3 ))\n    print(\"Error: Failed to simulate data: some genes are not expressed.\")\n  \n  list(counts = counts, \n       group = arg$group, \n       lambda0 = lambda[, 1],   # mean counts in control group\n       phi0 = phi[, 1],   # dispersion\n       de = de,   # DE indicator\n       delta = delta  # log fold change\n  )\n}\n",
    "created" : 1433967715801.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1081228344",
    "id" : "700BAF9E",
    "lastKnownWriteTime" : 1455048414,
    "path" : "~/Documents/ISU/Publication/ssize_rna/ver1.2.1/ssizeRNA/R/sim.counts.R",
    "project_path" : "R/sim.counts.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}