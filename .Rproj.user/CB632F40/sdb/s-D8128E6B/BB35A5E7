{
    "contents" : "#' Average Power and True FDR Based on limma/voom RNAseq Analysis Pipeline\n#' \n#' For the limma/voom RNAseq analysis pipeline, when we control false discovery\n#' rate by using the Benjamini and Hochberg step-up procedure (1995) \n#' and/or Storey and Tibshirani's q-value procedure (Storey et al, 2004),\n#' \\code{check.power} calculates average power and true FDR for given sample \n#' size, user-specified proportions of non-differentially expressed genes, \n#' number of iterations, FDR level to control, mean counts in control group, \n#' dispersion, and log fold change.\n#' \n#' @import qvalue\n#'\n#' @param nGenes total number of genes, the default value is \\code{10000}.\n#' @param pi0 proportion of non-differentially expressed genes, \n#'            the default value is \\code{0.8}.\n#' @param m sample size per treatment group.\n#' @param mu a vector (or scalar) of mean counts in control group \n#'           from which to simulate.\n#' @param disp a vector (or scalar) of dispersion parameter \n#'             from which to simulate.\n#' @param logfc a vector (or scalar, or a function that takes an integer n \n#'                        and generates a vector of length n)\n#'              of log fold change for differentially expressed (DE) genes.  \n#' @param up proportion of up-regulated genes among all DE genes, \n#'           the default value is \\code{0.5}.\n#' @param replace sample with or without replacement from given parameters. \n#'                See Details for more information.\n#' @param fdr the false discovery rate to be controlled.\n#' @param sims number of simulations to run when computing power and FDR.\n#' \n#' @return \\item{pow_bh_ave}{average power when controlling FDR \n#'                           by Benjamini and Hochberg (1995) method.}\n#' @return \\item{fdr_bh_ave}{true false discovery rate when controlling FDR \n#'                           by Benjamini and Hochberg (1995) method.}\n#' @return \\item{pow_bh_ave}{average power when controlling FDR \n#'                           by q-value procedure (Storey et al., 2004).}\n#' @return \\item{fdr_bh_ave}{true false discovery rate when controlling FDR\n#'                           by q-value procedure (Storey et al., 2004).}\n#' \n#' @author Ran Bi \\email{biran@@iastate.edu}, \n#'         Peng Liu \\email{pliu@@iastate.edu}\n#' \n#' @references Benjamini, Y. and Hochberg, Y. (1995) \n#'             Controlling the false discovery rate: a practical and \n#'             powerful approach to multiple testing. \n#'             \\emph{J. R. Stat. Soc. B}, 57, 289-300.\n#' \n#'             Storey, J. D., Taylor, J. E. and Siegmund, D. (2004)\n#'             Strong control, conservative point estimation and \n#'             simultaneous rates: a unified approach. \n#'             \\emph{J. R. Stat. Soc. B}, 66, 187- 205.\n#' \n#' @examples\n#' library(limma)\n#' library(qvalue)\n#' m <- 14                      ## sample size per treatment group\n#' mu <- 10                     ## mean read counts in control group\n#' disp <- 0.1                  ## dispersion for all genes\n#' logfc <- log(2)              ## log fold change for DE genes\n#' \n#' check.power(m = m, mu = mu, disp = disp, logfc = logfc, sims = 5)\n#'\n#' @export\n#' \ncheck.power <- function(nGenes = 10000, pi0 = 0.8, m, mu, disp, logfc, \n                        up = 0.5, replace = TRUE, fdr = 0.05, sims = 100) {\n  \n  ## empirical \"power\" & \"fdr\" function\n  powerfdr.fun <- function(fdr, p){\n    V <- sum( (p < fdr) & (sim$de == FALSE))\n    R <- sum( p < fdr )\n    S <- R - V\n    power <- S / (nGenes * (1 - pi0))\n    fdr_true <- V / R\n    return(c(power, fdr_true))\n  }\n  \n  res <- list()\n  pow_bh <- fdr_bh <- pow_qvalue <- fdr_qvalue <- rep(0, sims)\n  for (j in 1:sims){\n    # message(\"Performing simulation \", j, \"/\", sims, \"...\")\n    sim <- sim.counts(nGenes, pi0, m, mu, disp, logfc, up, replace)\n    cts <- sim$counts\n    lib.size <- colSums(cts)\n    group = rep(c(1, 2), each = m)\n    d <- DGEList(cts, lib.size, group = group)\n    d <- calcNormFactors(d)\n    design <- model.matrix(~ factor(group))\n    y <- voom(d, design, plot=FALSE)       # convert read counts to log2-cpm \n                                           # with associated weights\n    fit <- lmFit(y, design)\n    fit <- eBayes(fit)\n    pvalue <- fit$p.value[, 2]             # pvalue\n    \n    p_bh <- p.adjust(pvalue, method = \"BH\")  # Benjamini & Hochberg\n    pow_bh[j] <- powerfdr.fun(fdr, p_bh)[1]\n    fdr_bh[j] <- powerfdr.fun(fdr, p_bh)[2]\n  \n    p_qvalue <- qvalue(pvalue)$qvalues         # Storey and Tibshirani\n    pow_qvalue[j] <- powerfdr.fun(fdr, p_qvalue)[1]\n    fdr_qvalue[j] <- powerfdr.fun(fdr, p_qvalue)[2]\n  }\n  # message(\"Simulations completed.\")\n    \n  ## average power & true fdr over sims simulations\n  res$pow_bh_ave <- mean(pow_bh)\n  res$fdr_bh_ave <- mean(fdr_bh)\n  res$pow_qvalue_ave <- mean(pow_qvalue)\n  res$fdr_qvalue_ave <- mean(fdr_qvalue)\n  return(res)\n}\n",
    "created" : 1433967714904.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4095271679",
    "id" : "BB35A5E7",
    "lastKnownWriteTime" : 1455048499,
    "path" : "~/Documents/ISU/Publication/ssize_rna/ver1.2.0/ssizeRNA/R/check.power.R",
    "project_path" : "R/check.power.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}