{
    "contents" : "#' Sample Size Calculations for Two-Sample RNA-seq Experiments with \n#' Differing Mean and Dispersion Among Genes\n#' \n#' This function calculates appropriate sample sizes for two-sample \n#' RNA-seq experiments for a desired power in which mean and \n#' dispersion vary among genes. \n#' Sample size calculations are performed at controlled false discovery rates, \n#' user-specified proportions of non-differentially expressed genes, \n#' mean counts in control group, dispersion, and log fold change. \n#' A plot of power versus sample size is generated.\n#' \n#' @import Biobase ssize.fdr\n#' @param nGenes total number of genes, the default value is \\code{10000}.\n#' @param pi0 proportion of non-differentially expressed genes, \n#'            the default value is \\code{0.8}.\n#' @param m pseudo sample size for generated data.\n#' @param mu a vector (or scalar) of mean counts in control group \n#'           from which to simulate.\n#' @param disp a vector (or scalar) of dispersion parameter \n#'             from which to simulate.\n#' @param logfc a vector (or scalar, or a function that takes an integer n \n#'                        and generates a vector of length n)\n#'              of log fold change for differentially expressed (DE) genes.  \n#' @param up proportion of up-regulated genes among all DE genes, \n#'           the default value is \\code{0.5}.\n#' @param replace sample with or without replacement from given parameters. \n#'                See Details for more information.\n#' @param fdr the false discovery rate to be controlled.\n#' @param power the desired power to be achieved.\n#' @param maxN the maximum sample size used for power calculations.\n#' @param side options are \"two-sided\", \"upper\", or \"lower\".\n#' @param cex.title controls size of chart titles.\n#' @param cex.legend controls size of chart legend.\n#' \n#' @details If a vector is input for \\code{pi0}, sample size calculations \n#'          are performed for each proportion.\n#' \n#' If the total number of genes is larger than length of \\code{mu} or \n#' \\code{disp}, \\code{replace} always equals \\code{TRUE}.\n#' \n#' @return \\item{ssize}{sample sizes (for each treatment) at which \n#'                      desired power is first reached.}\n#' @return \\item{power}{power calculations with corresponding sample sizes.}\n#' @return \\item{crit.vals}{critical value calculations with \n#'                          corresponding sample sizes.}\n#' \n#' @author Ran Bi \\email{biran@@iastate.edu}, \n#'         Peng Liu \\email{pliu@@iastate.edu}\n#' \n#' @references Liu, P. and Hwang, J. T. G. (2007) Quick calculation for \n#' sample size while controlling false discovery rate with application \n#' to microarray analysis. \\emph{Bioinformatics} 23(6): 739-746. \n#' \n#' Orr, M. and Liu, P. (2009) Sample size estimation while controlling \n#' false discovery rate for microarray experiments using ssize.fdr package. \n#' \\emph{The R Journal}, 1, 1, May 2009, 47-53. \n#' \n#' Law, C. W., Chen, Y., Shi, W., Smyth, G. K. (2014). Voom: precision weights \n#' unlock linear model analysis tools for RNA-seq read counts. \n#' \\emph{Genome Biology} 15, R29.\n#' \n#' @seealso \\code{\\link{ssizeRNA_single}}\n#' \n#' @examples\n#' library(edgeR)\n#' library(Biobase)\n#' data(hammer.eset)\n#' ## load hammer dataset (Hammer, P. et al., 2010)\n#'\n#' counts <- exprs(hammer.eset)[, phenoData(hammer.eset)$Time == \"2 weeks\"]\n#' counts <- counts[rowSums(counts) > 0,]\n#' trt <- hammer.eset$protocol[which(hammer.eset$Time == \"2 weeks\")] \n#' \n#' mu <- apply(counts[, trt == \"control\"], 1, mean)  \n#' ## average read count in control group for each gene\n#' \n#' d <- DGEList(counts)\n#' d <- calcNormFactors(d)\n#' d <- estimateCommonDisp(d)\n#' d <- estimateTagwiseDisp(d)\n#' disp <- d$tagwise.dispersion      \n#' ## dispersion for each gene\n#' \n#' ## fixed log fold change\n#' logfc <- log(2)\n#' size <- ssizeRNA_vary(mu = mu, disp = disp, logfc = logfc, \n#'                       m = 30, maxN = 15, replace = FALSE)\n#' size$ssize         ## first sample size to reach desired power\n#' size$power         ## calculated power for each sample size\n#' size$crit.vals     ## calculated critical value for each sample size\n#' \n#' \n#' ## varying log fold change\n#' logfc1 <- function(x){rnorm(x, log(2), 0.5*log(2))}\n#' size1 <- ssizeRNA_vary(pi0 = 0.8, mu = mu, disp = disp, logfc = logfc1, \n#'                        m = 30, maxN = 20, replace = FALSE)\n#' \n#' @export\n#' \nssizeRNA_vary <- function(nGenes = 10000, pi0 = 0.8, m = 200, mu, disp, \n                          logfc, up = 0.5, replace = TRUE, fdr = 0.05, \n                          power = 0.8, maxN = 35, side = \"two-sided\", \n                          cex.title = 1.15, cex.legend = 1) {  \n  \n  sim <- sim.counts(nGenes, pi0, m, mu, disp, logfc, up, replace)\n  \n  d_cpm <- DGEList(sim$counts)\n  d_cpm <- calcNormFactors(d_cpm)\n  group = rep(c(1, 2), each = m)  # treatment groups\n  design <- model.matrix(~factor(group))\n  y <- voom(d_cpm, design, plot = FALSE)  \n  # convert counts to log2-cpm w/weights\n  \n  fit <- lmFit(y, design)\n  fit <- eBayes(fit)\n  fit$logcpm <- y$E  # normalized log-cpm value\n  fit$weights <- y$weights  # precision weights for each observation \n\n  from <- m + 1\n  to <- 2 * m \n  fit$www <- sqrt(2 / m * apply(y$weights[, 1:m], 1, sum) * \n                  apply(y$weights[, from:to], 1, sum) / \n                  apply(y$weights, 1, sum))\n  fit$Delta <- fit$coef[, 2] * fit$www  \n  # effect == weighted mean diff(logcpm)\n   \n  dm <- mean( (fit$Delta * sim$de)[sim$de != 0] )\n  ds <- sd( (fit$Delta * sim$de)[sim$de != 0] )\n  a <- fit$df.prior / 2\n  b <- fit$df.prior * fit$s2.prior / 2\n  sig <- density(fit$sigma)$x[which.max(density(fit$sigma)$y)]\n  \n  ret <- ssize.twoSampVary(deltaMean = dm, deltaSE = ds, a = a, b = b, \n                           fdr = fdr, power = power, pi0 = pi0, \n                           maxN = maxN, side = side, cex.title = cex.title, \n                           cex.legend = cex.legend)\n  return(ret)\n}\n",
    "created" : 1433967718459.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1013458076",
    "id" : "90325A62",
    "lastKnownWriteTime" : 1455048779,
    "path" : "~/Documents/ISU/Publication/ssize_rna/ver1.2.0/ssizeRNA/R/ssizeRNA_vary.R",
    "project_path" : "R/ssizeRNA_vary.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}